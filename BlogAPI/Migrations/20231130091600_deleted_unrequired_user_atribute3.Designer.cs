// <auto-generated />
using System;
using BlogAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BlogAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231130091600_deleted_unrequired_user_atribute3")]
    partial class deleted_unrequired_user_atribute3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BlogAPI.Entities.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChangeId")
                        .HasColumnType("bigint")
                        .HasColumnName("change_id");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<int?>("IsActive")
                        .HasColumnType("integer")
                        .HasColumnName("is_active");

                    b.Property<int?>("IsActual")
                        .HasColumnType("integer")
                        .HasColumnName("is_actual");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("NextId")
                        .HasColumnType("bigint")
                        .HasColumnName("next_id");

                    b.Property<Guid>("ObjectGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("object_guid");

                    b.Property<long>("ObjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("object_id");

                    b.Property<int?>("OperTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("oper_type_id");

                    b.Property<long>("PrevId")
                        .HasColumnType("bigint")
                        .HasColumnName("prev_id");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("TypeName")
                        .HasColumnType("text")
                        .HasColumnName("type_name");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.HasKey("Id");

                    b.ToTable("address");
                });

            modelBuilder.Entity("BlogAPI.Entities.Community", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_closed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("SubscribersCount")
                        .HasColumnType("integer")
                        .HasColumnName("subscribers_count");

                    b.HasKey("Id");

                    b.ToTable("community");
                });

            modelBuilder.Entity("BlogAPI.Entities.HierarchyAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AreaCode")
                        .HasColumnType("text")
                        .HasColumnName("area_code");

                    b.Property<long?>("ChangeId")
                        .HasColumnType("bigint")
                        .HasColumnName("change_id");

                    b.Property<string>("CityCode")
                        .HasColumnType("text")
                        .HasColumnName("city_code");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<int?>("IsActive")
                        .HasColumnType("integer")
                        .HasColumnName("is_active");

                    b.Property<long?>("NextId")
                        .HasColumnType("bigint")
                        .HasColumnName("next_id");

                    b.Property<long>("ObjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("object_id");

                    b.Property<long?>("ParentObjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_obj_id");

                    b.Property<string>("Path")
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<string>("PlaceCode")
                        .HasColumnType("text")
                        .HasColumnName("place_code");

                    b.Property<string>("PlanCode")
                        .HasColumnType("text")
                        .HasColumnName("plan_code");

                    b.Property<long?>("PrevId")
                        .HasColumnType("bigint")
                        .HasColumnName("prev_id");

                    b.Property<string>("RegionCode")
                        .HasColumnType("text")
                        .HasColumnName("region_code");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("StreetCode")
                        .HasColumnType("text")
                        .HasColumnName("street_code");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.HasKey("Id");

                    b.ToTable("hierarchy_address");
                });

            modelBuilder.Entity("BlogAPI.Entities.HousesAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AddNum1")
                        .HasColumnType("text")
                        .HasColumnName("add_num1");

                    b.Property<string>("AddNum2")
                        .HasColumnType("text")
                        .HasColumnName("add_num2");

                    b.Property<int?>("AddType1")
                        .HasColumnType("integer")
                        .HasColumnName("addtype1");

                    b.Property<int?>("AddType2")
                        .HasColumnType("integer")
                        .HasColumnName("addtype2");

                    b.Property<long>("ChangeId")
                        .HasColumnType("bigint")
                        .HasColumnName("change_id");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("HouseNum")
                        .HasColumnType("text")
                        .HasColumnName("house_num");

                    b.Property<int?>("HouseType")
                        .HasColumnType("integer")
                        .HasColumnName("house_type");

                    b.Property<int?>("IsActive")
                        .HasColumnType("integer")
                        .HasColumnName("is_active");

                    b.Property<int?>("IsActual")
                        .HasColumnType("integer")
                        .HasColumnName("is_actual");

                    b.Property<long?>("NextId")
                        .HasColumnType("bigint")
                        .HasColumnName("next_id");

                    b.Property<Guid>("ObjectGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("object_guid");

                    b.Property<long>("ObjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("object_id");

                    b.Property<int?>("OperTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("oper_type_id");

                    b.Property<long?>("PrevId")
                        .HasColumnType("bigint")
                        .HasColumnName("prev_id");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.HasKey("Id");

                    b.ToTable("houses_address");
                });

            modelBuilder.Entity("BlogAPI.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires");

                    b.Property<bool>("Revoked")
                        .HasColumnType("boolean")
                        .HasColumnName("revoked");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.HasKey("Id");

                    b.ToTable("refresh_tokens");
                });

            modelBuilder.Entity("BlogAPI.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<Guid?>("CommunityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("Gender")
                        .HasColumnType("text")
                        .HasColumnName("gender");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("BlogAPI.Entities.UserCommunityRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("CommunityId")
                        .HasColumnType("uuid")
                        .HasColumnName("community_id");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.HasKey("UserId", "CommunityId");

                    b.ToTable("user_community_role");
                });

            modelBuilder.Entity("BlogAPI.Entities.User", b =>
                {
                    b.HasOne("BlogAPI.Entities.Community", null)
                        .WithMany("Administrators")
                        .HasForeignKey("CommunityId");
                });

            modelBuilder.Entity("BlogAPI.Entities.Community", b =>
                {
                    b.Navigation("Administrators");
                });
#pragma warning restore 612, 618
        }
    }
}
